/*
Copyright (C) 2009 Scott Grauer-Gray, Chandra Kambhammettu, and Kannappan Palaniappan
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
*/


GPU Implementation of Belief Propagation for stereo using CUDA

S. Grauer-Gray, C. Kambhammettu, and K.Palaniappan

This README describes an implementation of the CUDA belief propagation algorithm described in our paper 
"GPU implementation of belief propagation using CUDA for cloud tracking and reconstruction" which was 
published at the 2008 IAPR Workshop on Pattern Recognition in Remote Sensing (PRRS 2008) and can be 
found at the following address: http://scottgg.net/cudaBeliefProp.pdf.  Please cite this 
work if using any of this code as part of a research paper or other work.

Will note that there have been changes from the initial implementation as presented in the paper, both for optimization,
to work on the latest NVIDIA GPUs with the latest CUDA toolkits, and to add a parallel CPU implementation.  Also, the
motion estimation portion of the code was removed to narrow the focus of this work (though could certainly be added back
in the future).  The additional optimizations as well as the parallel CPU implementation are described in
http://scottgg.net/OptimizingGlobalStereoMatchingOnNVIDIAGPUsAndCPUs.pdf.  The original code is available at
http://scottgg.net/beliefPropCodePost.zip.

This code is distributed using the GNU General Public License, so any derivative work which 
is distributed must also contain this license.

Please email comments and bug reports to: sgrauerg@gmail.com


Usage:

This code runs belief propagation for stereo vision on the CPU and GPU using CUDA on Windows and Linux-based systems.

The parameters are defined in ParameterFiles/bpStereoParameters.h and are documented in that file and the paper.  
In order to compile/re-compile the program, navigate to the directory LinuxMakeAndRunBPOptimizedCPU (for optimized GPU
implementation or LinuxMakeAndRunBPCUDA (for CUDA implementation; currently this get compilation error due to use of C++17
with NVCC) and run "make clean" and "make".  To run the CUDA code, the CUDA installation must have a symbolic link to /usr/local/cuda/
for the Makefile to work as is.

The Tsukuba stereo set is included as part of this folder as a sample program.  In order to test the implementation on this 
stereo set using the initial parameters as defined in ParameterFiles/bpStereoParameters.h, perform the following steps:

LINUX:

1.  (CUDA ONLY) If needed, set the PATH and LD_LIBRARY_PATH to the necessary paths needed to run CUDA programs (usually PATH is appended
with $CUDA_DIR/bin and LD_LIBRARY_PATH=$CUDA_DIR/lib or LD_LIBRARY_PATH=$CUDA_DIR/lib64).

2.  Navigate to the folder with the optimized CPU implementation or CUDA implementation Makefile (LinuxMakeAndRunBPOptimizedCPU / 
LinuxMakeAndRunBPCUDA).

3.  Execute the commands "make clean" and "make" on the command line (Note that the current Makefile for CUDA compiles specifically for
compute capabilities 6.0, 6.1, 7.0, and 7.5, which correspond to Pascal, Volta, and Turing architecture discrete GPUs.  May need to make
adjustments to run on other NVIDIA GPUs or to run on SOCs such as the Jetson TX1/2).

4.  The executable named "driverCPUBp" or "driverCudaBp" should now be created, so call executable to run the implementation on the
Tsukuba set. The implementation is run multiple times to more accuracy guage the runtime, with the median optimized CPU or GPU runtime given.
The single-thread CPU implementation code from http://cs.brown.edu/people/pfelzens/bp/index.html is also run with the runtime given.

5.  The GPU and CPU runtimes are output in the terminal also with the location of the output disparity maps.  More detailed info
including input parameters, detailed timings, and output disparity maps comparison to ground truth are in output.txt file (in the
same folder as the driverCudaBp executable).

6.  In order to adjust the parameters to run on different input or different parameters, adjust the desired parameters in 
ParameterFiles/bpStereoParameters.h, run "make clean" and "make" to compile to the program with the adjusted parameters, then call
the executable to run the program with the adjusted parameters.

WINDOWS:

1. Open CreateBeliefPropDLLs.sln Visual Studio Project in WindowsVSCreateDLLsWithRunBPWithDLLs/CreateBeliefPropDLLs folder.  

2. Select to compile then run the application.  The solution will first compile the single-thread CPU, optimized CPU, 
and CUDA implementations into DLLs, then the main program in the solution will load the DLLs and run the program.  The
program output shows the optimized CPU and CUDA implementation results compared to the single-thread CPU implementation results.
Parameters can be adjusted in the ParameterFiles/bpStereoParameters.h file and will need to re-compile to see results with
adjusted parameters.
